# The interface `lorri daemon` exposes.
interface com.target.lorri

# WatchShell instructs the daemon to evaluate a Nix expression and re-evaluate
# it when it or its dependencies change.
method WatchShell(shell_nix: ShellNix) -> ()

# ShellNix describes the Nix expression which evaluates to a development
# environment.
type ShellNix (
  # The absolute path of a Nix file specifying the project environment.
  path: string
)

# Monitor the daemon. The method will reply with an update whenever a build begins or ends.
# Montior will immediately reply with a snapshot of known projects, then a marker event,
# indicating that the stream of events is now "live."
method Monitor() -> (event: Event)

type Event (
    kind: (sectionend, started, completed, failure),
    nix_file: ?ShellNix, # not in sectionend
    reason: ?Reason,     # only if started
    result: ?Outcome,     # only if completed
    failure: ?Failure    # only if failure
)

type Reason (
    kind: (projectadded, pingreceived, fileschanged, unknown),
    project: ?ShellNix,
    files: ?[]string,
    debug: ?string
)

type Outcome (
    project_root: string
)

type Failure (
    log: []string
)

# WatchServices establishes a stream with the daemon. Initially, the daemon
# evaluates the given services definition to an array of Command objects and
# sends a reply for each of them. After this initial evaluation, the daemon
# watches the services definition and its dependencies for changes,
# re-evaluates it as appropriate and sends a reply for each Command again.
#
# This is a streaming RPC. The daemon only accepts client calls with the "more"
# property set - see https://varlink.org/Method-Call.
# TODO: Implement WatchServices
#method WatchServices(services_nix: ServicesNix) -> (service: Service)

# ServicesNix describes the Nix expression which evaluates to a list of
# services.
type ServicesNix (
  # The absolute path of a Nix file specifying the services to be run. This Nix
  # file must evaluate to a JSON document of type []Command, that is, an array
  # of objects whose properties are described by the Command type.
  path: string
)

# Service describes an individual service to be run.
type Service (
  # The user-friendly name of the service. This is used for identification
  # purposes too: only a single instance of a service with a particular name is
  # run at any one time.
  name: string,

  # How to run the service.
  command: Command
)

# Command describes how to run a terminal application.
type Command (
  # The path of the command binary.
  program: string,

  # Arguments to be passed to the binary.
  args: []string
)
